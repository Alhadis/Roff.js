#!/usr/bin/env node
"use strict";

const {debug, device, argv} = readArgs();
new Promise((resolve, reject) => {
	const fs = require("fs");
	if(argv[0])
		resolve(fs.readFileSync(argv[0]));
	else{
		const input = [];
		process.stdin.on("error", error => reject(error));
		process.stdin.on("readable", () => {
			const bytes = process.stdin.read();
			null !== bytes ? input.push(...bytes) : resolve(input);
		});
	}
}).then(data => {
	// Bail if input doesn't begin with an obvious C/A/T header
	if(0x40 !== data[0] && 0xEF !== data[1]){
		process.stderr.write("cat2dit: input is not for a C/A/T phototypesetter\n");
		process.exit(2);
	}
	const driver = new (require("..").Phototypesetter)(device);
	driver.debug = !!debug;
	driver.process(data);
	process.stdout.write(driver.output);
});


/**
 * Extract and parse options from command-line arguments.
 * @return {Object}
 * @internal
 */
function readArgs(argv = null){
	let device = "cat";
	let debug = false;
	
	argv = argv
		? argv.slice()
		: process.argv.slice(2);
	
	while(argv.length){
		// -d: Insert debugging statements in ditroff output
		if(/^-d$/.test(argv[0]))
			debug = true;
		
		// -T [device]: Emulate postprocessor device (default: "cat")
		else if(/^-(d)?T(\S*)/.test(argv[0])){
			if(RegExp.$1) debug = true;
			device = (RegExp.$2 || argv.splice(1, 1)[0] || "").toLowerCase();
		}
		else{
			"--" === argv[0] && argv.shift();
			break;
		}
		argv.shift();
	}

	// Validate -T parameter
	if(!["cat", "post", "ps", "pdf"].includes(device)){
		const reason = device.trim()
			? "unsupported device-mode: " + device
			: "missing parameter for -T switch";
		process.stderr.write(`cat2dit: ${reason}\n`);
		process.exit(1);
	}
	return {debug, device, argv};
}
